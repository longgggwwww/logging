╔══════════════════════════════════════════════════════════════════════════╗
║                   🎉 KAFKA ERROR HANDLING SYSTEM                         ║
║                      Production-Ready Implementation                     ║
╚══════════════════════════════════════════════════════════════════════════╝

📦 TỔNG QUAN HỆ THỐNG
═══════════════════════════════════════════════════════════════════════════

✅ Cấu trúc Message Mới:
   
   {
     "id": "unique-id",                    // UUID - Bắt buộc
     "timestamp": "2023-10-05T12:34:56Z",  // ISO 8601 - Bắt buộc
     "level": "ERROR",                      // ERROR/WARNING/INFO - Bắt buộc
     "service": "tên-service",              // Tên service - Bắt buộc
     "message": "Mô tả lỗi",                // Mô tả - Bắt buộc
     "stackTrace": "stack trace...",        // Stack trace - Tùy chọn
     "user": "user@example.com",            // User liên quan - Tùy chọn
     "requestId": "req-abc123",             // Request ID - Tùy chọn
     "additionalData": {}                   // Dữ liệu bổ sung - Tùy chọn
   }

   Chi tiết đầy đủ: MESSAGE_STRUCTURE.md

✅ Tính năng:
   
   1. Dead Letter Queue (DLQ)         → ✅ ĐÃ CÓ
   2. Error Handling                  → ✅ ĐẦY ĐỦ
   3. Retry Mechanism                 → ✅ CÓ 2 LOẠI


📁 CẤU TRÚC FILES
═══════════════════════════════════════════════════════════════════════════

discord-webhook/
├── index.js                  → Consumer chính (PRODUCTION-READY)
│   ├── ✅ Dead Letter Queue implementation
│   ├── ✅ Retry mechanism (2 loại)
│   ├── ✅ Error handling đầy đủ
│   ├── ✅ Metrics & monitoring
│   ├── ✅ Graceful shutdown
│   └── ✅ Rich Discord embeds

Scripts:
├── create-topics.sh          → Tạo tất cả Kafka topics
├── cleanup.sh                → Reset hệ thống
├── monitor-dlq.sh            → Monitor Dead Letter Queue
├── test-producer.js          → Test với valid + invalid messages

Documentation:
├── README.md                 → Hướng dẫn sử dụng đầy đủ
├── ARCHITECTURE.md           → Sơ đồ kiến trúc chi tiết
└── FEATURES.md              → Checklist tính năng & test scenarios


🔧 KAFKA TOPICS
═══════════════════════════════════════════════════════════════════════════

✅ error-logs              → Main topic (messages mới)
✅ error-logs-retry        → Retry queue (messages đang retry)
✅ error-logs-dlq          → Dead Letter Queue (messages thất bại)

   Tất cả có: 3 partitions, replication factor 3


⚙️ TÍNH NĂNG CHI TIẾT
═══════════════════════════════════════════════════════════════════════════

1. 📮 DEAD LETTER QUEUE (DLQ)
   ─────────────────────────────────────────────────────────────────
   Topic:        error-logs-dlq
   Function:     sendToDLQ() (lines 144-174)
   
   Lưu trữ:
   ✓ Original message data
   ✓ Error stack trace
   ✓ Metadata (topic, partition, offset)
   ✓ Attempt count
   ✓ Timestamps
   
   Monitor:      ./monitor-dlq.sh

2. 🔄 RETRY MECHANISM
   ─────────────────────────────────────────────────────────────────
   
   A. Discord Webhook Retry (Immediate)
      Function:      retryWithBackoff() (lines 86-102)
      Max retries:   3
      Backoff:       Exponential (1s → 2s → 4s)
      Use case:      Discord API temporary failures
   
   B. Message Processing Retry (Queue-based)
      Topic:         error-logs-retry
      Function:      sendToRetryQueue() (lines 176-203)
      Max retries:   3
      Delay:         2 seconds per attempt
      Use case:      Parse errors, validation errors

3. 🛡️ ERROR HANDLING
   ─────────────────────────────────────────────────────────────────
   Function:      processMessage() (lines 205-270)
   
   Handles:
   ✓ JSON parse errors
   ✓ Validation errors (missing fields)
   ✓ Network errors (Discord webhook)
   ✓ Timeout errors
   ✓ Unknown errors
   
   Flow:
   Error → Log → Check retry count → Retry OR DLQ → Commit offset

4. 📊 METRICS & MONITORING
   ─────────────────────────────────────────────────────────────────
   Auto-log:      Every 30 seconds (lines 59-75)
   
   Tracks:
   ✓ Processed count
   ✓ Failed count
   ✓ Retried successfully count
   ✓ Sent to DLQ count
   ✓ Discord errors count

5. 🎯 BONUS FEATURES
   ─────────────────────────────────────────────────────────────────
   ✓ Graceful shutdown (SIGTERM/SIGINT handling)
   ✓ Rich Discord embeds with metadata
   ✓ Configurable everything (timeouts, retries, delays)
   ✓ Production Kafka config (timeouts, auto-commit)
   ✓ Consumer stability (no crashes)


🚀 HƯỚNG DẪN SỬ DỤNG
═══════════════════════════════════════════════════════════════════════════

Step 1: Tạo Topics
──────────────────────────────────────────────────────────────────
   $ ./create-topics.sh
   
   Tạo 3 topics: error-logs, error-logs-retry, error-logs-dlq

Step 2: Chạy Consumer
──────────────────────────────────────────────────────────────────
   $ cd discord-webhook
   $ node index.js
   
   Consumer sẽ:
   - Connect tới Kafka cluster
   - Subscribe tới error-logs và error-logs-retry
   - Bắt đầu xử lý messages
   - Log metrics mỗi 30s

Step 3: Test
──────────────────────────────────────────────────────────────────
   $ node test-producer.js
   
   Gửi 5 messages:
   - 3 valid   → Sẽ thành công → Discord
   - 2 invalid → Retry 3 lần → DLQ

Step 4: Monitor DLQ
──────────────────────────────────────────────────────────────────
   $ ./monitor-dlq.sh
   
   Xem messages thất bại trong DLQ


📊 TEST SCENARIOS
═══════════════════════════════════════════════════════════════════════════

Scenario 1: ✅ Valid Message (Normal Flow)
───────────────────────────────────────────────────────────────────
   Producer → error-logs → Parse ✅ → Validate ✅ 
           → Discord ✅ → Commit

Scenario 2: 🔄 Discord Temporary Failure (Immediate Retry)
───────────────────────────────────────────────────────────────────
   Producer → error-logs → Parse ✅ → Validate ✅ 
           → Discord ❌ → Retry (1s) 
           → Discord ❌ → Retry (2s) 
           → Discord ✅ → Commit

Scenario 3: ⚰️  Invalid Message (DLQ Flow)
───────────────────────────────────────────────────────────────────
   Producer → error-logs → Parse ✅ → Validate ❌ 
           → error-logs-retry (attempt 1) → Validate ❌
           → error-logs-retry (attempt 2) → Validate ❌
           → error-logs-retry (attempt 3) → Validate ❌
           → error-logs-dlq ⚰️

Scenario 4: 💥 Invalid JSON (Parse Error → DLQ)
───────────────────────────────────────────────────────────────────
   Producer → error-logs → Parse ❌
           → error-logs-retry (3x attempts) → Parse ❌
           → error-logs-dlq ⚰️


🔍 MONITORING & DEBUGGING
═══════════════════════════════════════════════════════════════════════════

Check Consumer Metrics:
   → Tự động log mỗi 30s trong console

Check Kafka Topics:
   $ docker exec kafka-controller-1 /opt/kafka/bin/kafka-topics.sh \
     --list --bootstrap-server localhost:9092

Check Consumer Group:
   $ docker exec kafka-controller-1 \
     /opt/kafka/bin/kafka-consumer-groups.sh \
     --describe --group discord-group \
     --bootstrap-server localhost:9092

Check DLQ Messages:
   $ ./monitor-dlq.sh

Reset Everything:
   $ ./cleanup.sh


📚 DOCUMENTATION
═══════════════════════════════════════════════════════════════════════════

README.md         → Hướng dẫn chi tiết, configuration, best practices
ARCHITECTURE.md   → Sơ đồ kiến trúc, flow diagrams, deployment
FEATURES.md       → Checklist đầy đủ, test scenarios, comparison


🎯 KEY IMPROVEMENTS
═══════════════════════════════════════════════════════════════════════════

TRƯỚC:                          SAU:
───────────────────────────────────────────────────────────────────
❌ No DLQ                       ✅ Full DLQ with metadata
❌ No retry                     ✅ 2 types of retry
❌ Basic error handling         ✅ Production-grade handling
❌ No metrics                   ✅ Real-time metrics
❌ Can crash                    ✅ Stable, graceful shutdown
❌ Simple logs                  ✅ Rich Discord embeds
❌ Hard to monitor              ✅ Easy monitoring tools


💡 BEST PRACTICES IMPLEMENTED
═══════════════════════════════════════════════════════════════════════════

✓ Exponential backoff cho retry
✓ Separate retry queue để không block main topic
✓ DLQ để không mất data
✓ Metrics cho monitoring
✓ Graceful shutdown
✓ Configurable timeouts
✓ Auto-commit với interval hợp lý (5s)
✓ Replication factor 3 cho HA
✓ Multiple partitions cho parallelism


🎉 KẾT LUẬN
═══════════════════════════════════════════════════════════════════════════

Hệ thống Kafka của bạn giờ đây ĐÃ CÓ ĐẦY ĐỦ:

✅ Dead Letter Queue (DLQ)
✅ Error Handling (comprehensive)
✅ Retry Mechanism (2 types)
✅ Monitoring & Metrics
✅ Production-ready configuration

Tất cả đều được implement theo best practices và sẵn sàng cho 
production environment! 🚀


═══════════════════════════════════════════════════════════════════════════
                            Made with ❤️ by AI
═══════════════════════════════════════════════════════════════════════════
