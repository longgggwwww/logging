services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: postgres
    environment:
      POSTGRES_DB: kafka_db
      POSTGRES_USER: kafka_user
      POSTGRES_PASSWORD: kafka_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - kafka-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - kafka-network

  # Kafka Cluster with KRaft Mode (3 brokers)
  kafka-controller-1:
    image: apache/kafka:3.7.0
    container_name: kafka-controller-1
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: "controller,broker"
      KAFKA_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_LISTENERS: "PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:19092"
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://kafka-controller-1:9092,EXTERNAL://localhost:19092"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT"
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@kafka-controller-1:9093,2@kafka-controller-2:9093,3@kafka-controller-3:9093"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_NUM_PARTITIONS: 3
      CLUSTER_ID: "MkU3OEVBNTcwNTJENDM2Qk"
    networks:
      - kafka-network
    depends_on:
      - postgres

  kafka-controller-2:
    image: apache/kafka:3.7.0
    container_name: kafka-controller-2
    environment:
      KAFKA_NODE_ID: 2
      KAFKA_PROCESS_ROLES: "controller,broker"
      KAFKA_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_LISTENERS: "PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:29092"
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://kafka-controller-2:9092,EXTERNAL://localhost:29092"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT"
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@kafka-controller-1:9093,2@kafka-controller-2:9093,3@kafka-controller-3:9093"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_NUM_PARTITIONS: 3
      CLUSTER_ID: "MkU3OEVBNTcwNTJENDM2Qk"
    networks:
      - kafka-network

  kafka-controller-3:
    image: apache/kafka:3.7.0
    container_name: kafka-controller-3
    environment:
      KAFKA_NODE_ID: 3
      KAFKA_PROCESS_ROLES: "controller,broker"
      KAFKA_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_LISTENERS: "PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:39092"
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://kafka-controller-3:9092,EXTERNAL://localhost:39092"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT"
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@kafka-controller-1:9093,2@kafka-controller-2:9093,3@kafka-controller-3:9093"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_NUM_PARTITIONS: 3
      CLUSTER_ID: "MkU3OEVBNTcwNTJENDM2Qk"
    networks:
      - kafka-network

  # Kafka UI
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    environment:
      KAFKA_CLUSTERS_0_NAME: local-kraft-cluster
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka-controller-1:9092,kafka-controller-2:9092,kafka-controller-3:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: ""
      KAFKA_CLUSTERS_0_KRAFT: "true"
    networks:
      - kafka-network
    depends_on:
      - kafka-controller-1
      - kafka-controller-2
      - kafka-controller-3

  # Kafka Topics Initialization
  kafka-init:
    image: apache/kafka:3.7.0
    container_name: kafka-init
    networks:
      - kafka-network
    depends_on:
      - kafka-controller-1
      - kafka-controller-2
      - kafka-controller-3
    entrypoint: ["/bin/sh", "-c"]
    command:
      - |
        echo '‚è≥ Waiting for Kafka brokers to be ready...'
        sleep 20
        
        echo 'üöÄ Creating Kafka topics...'
        
        # Create topic error-logs (main topic)
        echo 'üìù Creating main topic: error-logs'
        /opt/kafka/bin/kafka-topics.sh --create --topic error-logs --bootstrap-server kafka-controller-1:9092 --partitions 3 --replication-factor 3 --if-not-exists
        
        # Create topic retry queue
        echo 'üìù Creating retry topic: error-logs-retry'
        /opt/kafka/bin/kafka-topics.sh --create --topic error-logs-retry --bootstrap-server kafka-controller-1:9092 --partitions 3 --replication-factor 3 --if-not-exists
        
        # Create Dead Letter Queue
        echo 'üìù Creating dead letter queue: error-logs-dlq'
        /opt/kafka/bin/kafka-topics.sh --create --topic error-logs-dlq --bootstrap-server kafka-controller-1:9092 --partitions 3 --replication-factor 3 --if-not-exists
        
        echo '‚úÖ Topics creation completed!'
        echo ''
        echo 'üìã Current topics list:'
        /opt/kafka/bin/kafka-topics.sh --list --bootstrap-server kafka-controller-1:9092
        
        echo ''
        echo 'üìä Topics details:'
        /opt/kafka/bin/kafka-topics.sh --describe --topic error-logs --bootstrap-server kafka-controller-1:9092
        
        /opt/kafka/bin/kafka-topics.sh --describe --topic error-logs-retry --bootstrap-server kafka-controller-1:9092
        
        /opt/kafka/bin/kafka-topics.sh --describe --topic error-logs-dlq --bootstrap-server kafka-controller-1:9092
        
        echo ''
        echo '‚úÖ Kafka topics initialization completed!'
    restart: "no"

  # Log Processor Service (Prisma + PostgreSQL)
  log-processor:
    build:
      context: ./log-processor
      dockerfile: Dockerfile
    container_name: log-processor
    environment:
      DATABASE_URL: "postgresql://kafka_user:kafka_password@postgres:5432/kafka_db?schema=public"
      KAFKA_BROKERS: "kafka-controller-1:9092,kafka-controller-2:9092,kafka-controller-3:9092"
      KAFKA_GROUP_ID: "log-processor-group"
      KAFKA_CLIENT_ID: "log-processor"
      KAFKA_TOPIC: "logs.error.dlq"
      NODE_ENV: "production"
    networks:
      - kafka-network
    depends_on:
      - postgres
      - kafka-controller-1
      - kafka-controller-2
      - kafka-controller-3
      - kafka-init
    restart: unless-stopped

  # API Service
  api-service:
    build:
      context: ./api-service
      dockerfile: Dockerfile
    container_name: api-service
    environment:
      DATABASE_URL: "postgresql://kafka_user:kafka_password@postgres:5432/kafka_db?schema=public"
      REDIS_URL: "redis://redis:6379"
      PORT: "3000"
      NODE_ENV: "production"
    ports:
      - "3000:3000"
    networks:
      - kafka-network
    depends_on:
      - postgres
      - redis
    restart: unless-stopped

  # Discord Webhook Service
  discord-webhook:
    build:
      context: ./discord-webhook
      dockerfile: Dockerfile
    container_name: discord-webhook
    environment:
      KAFKA_BROKERS: "kafka-controller-1:9092,kafka-controller-2:9092,kafka-controller-3:9092"
      DISCORD_WEBHOOK_URL: "https://discord.com/api/webhooks/1425882193229643818/8nmQfxFdkFYsvcDuyAw0RtU6OSVbqJrITmxLJscQeo5Fxq9DS2TVaFscb3FLy64yZAhP"
      NODE_ENV: "production"
    networks:
      - kafka-network
    depends_on:
      - kafka-controller-1
      - kafka-controller-2
      - kafka-controller-3
      - kafka-init
    restart: unless-stopped

  # FCM Service
  fcm-service:
    build:
      context: ./fcm-service
      dockerfile: Dockerfile
    container_name: fcm-service
    environment:
      KAFKA_BROKERS: "kafka-controller-1:9092,kafka-controller-2:9092,kafka-controller-3:9092"
      KAFKA_MAIN_TOPIC: "error-logs"
      KAFKA_DLQ_TOPIC: "error-logs-dlq"
      KAFKA_RETRY_TOPIC: "error-logs-retry"
      FCM_TOPICS: "all_users,error_alerts"
      NODE_ENV: "production"
    networks:
      - kafka-network
    depends_on:
      - kafka-controller-1
      - kafka-controller-2
      - kafka-controller-3
      - kafka-init
    restart: unless-stopped

  # Web App Service
  web-app:
    build:
      context: ./web-app
    container_name: web-app
    ports:
      - 8000:8000
    networks:
      - kafka-network
    depends_on:
      - api-service
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  kafka-network:
    driver: bridge