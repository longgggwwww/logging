services:
  api-service:
    build:
      context: ./services/api-service
      dockerfile: Dockerfile
    container_name: api-service
    environment:
      DATABASE_URL: "mongodb://admin:password@mongodb:27017/log_processor_db?authSource=admin"
      REDIS_URL: "redis://redis:6379"
      PORT: "3000"
      NODE_ENV: "production"
    ports:
      - "3000:3000"
    networks:
      - kafka-network
    depends_on:
      - mongodb
      - redis
    restart: unless-stopped

  discord-bot:
    build:
      context: ./services/discord-bot
      dockerfile: Dockerfile
    container_name: discord-bot
    environment:
      NODE_ENV: "production"
      KAFKA_BROKERS: "kafka-controller-1:9092,kafka-controller-2:9092,kafka-controller-3:9092"
      KAFKA_MAIN_TOPIC: "error-logs"
      KAFKA_RETRY_TOPIC: "error-logs-retry"
      KAFKA_DLQ_TOPIC: "error-logs-dlq"
      DISCORD_TOKEN: "${DISCORD_BOT_TOKEN}"
      DISCORD_GUILD_ID: "${DISCORD_GUILD_ID}"
      DISCORD_CRITICAL_TYPES: "ERROR"
      DISCORD_MIN_SEVERITY_CODE: "500"
    networks:
      - kafka-network
    depends_on:
      - kafka-controller-1
      - kafka-controller-2
      - kafka-controller-3
      - kafka-init
    restart: unless-stopped

  fcm-service:
    build:
      context: ./services/fcm-service
      dockerfile: Dockerfile
    container_name: fcm-service
    environment:
      KAFKA_BROKERS: "kafka-controller-1:9092,kafka-controller-2:9092,kafka-controller-3:9092"
      KAFKA_MAIN_TOPIC: "error-logs"
      KAFKA_DLQ_TOPIC: "error-logs-dlq"
      KAFKA_RETRY_TOPIC: "error-logs-retry"
      FCM_TOPICS: "all_users,error_alerts"
      FCM_MIN_SEVERITY_CODE: "500"
      FCM_CRITICAL_TYPES: "ERROR"
      NODE_ENV: "production"
    networks:
      - kafka-network
    depends_on:
      - kafka-controller-1
      - kafka-controller-2
      - kafka-controller-3
      - kafka-init
    restart: unless-stopped

  kafka-controller-1:
    image: apache/kafka:3.7.0
    container_name: kafka-controller-1
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: "controller,broker"
      KAFKA_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_LISTENERS: "PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:19092"
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://kafka-controller-1:9092,EXTERNAL://localhost:19092"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT"
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@kafka-controller-1:9093,2@kafka-controller-2:9093,3@kafka-controller-3:9093"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_NUM_PARTITIONS: 3
      CLUSTER_ID: "MkU3OEVBNTcwNTJENDM2Qk"
    ports:
      - "19092:19092"
    networks:
      - kafka-network
    depends_on:
      - postgres

  kafka-controller-2:
    image: apache/kafka:3.7.0
    container_name: kafka-controller-2
    environment:
      KAFKA_NODE_ID: 2
      KAFKA_PROCESS_ROLES: "controller,broker"
      KAFKA_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_LISTENERS: "PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:29092"
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://kafka-controller-2:9092,EXTERNAL://localhost:29092"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT"
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@kafka-controller-1:9093,2@kafka-controller-2:9093,3@kafka-controller-3:9093"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_NUM_PARTITIONS: 3
      CLUSTER_ID: "MkU3OEVBNTcwNTJENDM2Qk"
    ports:
      - "29092:29092"
    networks:
      - kafka-network

  kafka-controller-3:
    image: apache/kafka:3.7.0
    container_name: kafka-controller-3
    environment:
      KAFKA_NODE_ID: 3
      KAFKA_PROCESS_ROLES: "controller,broker"
      KAFKA_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_LISTENERS: "PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:39092"
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://kafka-controller-3:9092,EXTERNAL://localhost:39092"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT"
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@kafka-controller-1:9093,2@kafka-controller-2:9093,3@kafka-controller-3:9093"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_NUM_PARTITIONS: 3
      CLUSTER_ID: "MkU3OEVBNTcwNTJENDM2Qk"
    ports:
      - "39092:39092"
    networks:
      - kafka-network

  kafka-init:
    image: apache/kafka:3.7.0
    container_name: kafka-init
    networks:
      - kafka-network
    depends_on:
      - kafka-controller-1
      - kafka-controller-2
      - kafka-controller-3
    entrypoint: ["/bin/sh", "-c"]
    command:
      - |
        sleep 20
        /opt/kafka/bin/kafka-topics.sh --create --topic error-logs --bootstrap-server kafka-controller-1:9092 --partitions 3 --replication-factor 3 --if-not-exists
        /opt/kafka/bin/kafka-topics.sh --create --topic error-logs-retry --bootstrap-server kafka-controller-1:9092 --partitions 3 --replication-factor 3 --if-not-exists
        /opt/kafka/bin/kafka-topics.sh --create --topic error-logs-dlq --bootstrap-server kafka-controller-1:9092 --partitions 3 --replication-factor 3 --if-not-exists
    restart: "no"

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local-kraft-cluster
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka-controller-1:9092,kafka-controller-2:9092,kafka-controller-3:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: ""
      KAFKA_CLUSTERS_0_KRAFT: "true"
    networks:
      - kafka-network
    depends_on:
      - kafka-controller-1
      - kafka-controller-2
      - kafka-controller-3

  log-processor:
    build:
      context: ./services/log-processor
      dockerfile: Dockerfile
    container_name: log-processor
    environment:
      DATABASE_URL: "mongodb://admin:password@mongodb:27017/log_processor_db?authSource=admin"
      REDIS_URL: "redis://redis:6379"
      KAFKA_BROKERS: "kafka-controller-1:9092,kafka-controller-2:9092,kafka-controller-3:9092"
      KAFKA_GROUP_ID: "log-processor-group"
      KAFKA_CLIENT_ID: "log-processor"
      KAFKA_TOPIC: "logs.error.dlq"
      KAFKA_MAIN_TOPIC: "error-logs"
      KAFKA_DLQ_TOPIC: "error-logs-dlq"
      KAFKA_RETRY_TOPIC: "error-logs-retry"
      NODE_ENV: "production"
    networks:
      - kafka-network
    depends_on:
      - mongodb
      - kafka-controller-1
      - kafka-controller-2
      - kafka-controller-3
      - kafka-init
    restart: unless-stopped

  mongodb:
    image: mongo:7.0
    container_name: mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
    volumes:
      - mongodb_data:/data/db
    networks:
      - kafka-network

  postgres:
    image: postgres:15
    container_name: postgres
    environment:
      POSTGRES_DB: kafka_db
      POSTGRES_USER: kafka_user
      POSTGRES_PASSWORD: kafka_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts/postgres-init.sql:/docker-entrypoint-initdb.d/postgres-init.sql
    networks:
      - kafka-network

  redis:
    image: redis:7-alpine
    container_name: redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - kafka-network

  web-app:
    build:
      context: ./web-app
      dockerfile: Dockerfile
    container_name: web-app
    environment:
      KEYCLOAK_URL: "https://keycloak.iit.vn"
      KEYCLOAK_REALM: "master"
      KEYCLOAK_CLIENT_ID: "log-monitoring"
      REACT_APP_API_BASE_URL: "http://api-service:3000"
    ports:
      - "8000:80"
    networks:
      - kafka-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  mongodb_data:

networks:
  kafka-network:
    driver: bridge